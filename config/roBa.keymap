#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <behaviors/naginata.dtsi>

// 薙刀式のOS設定  (WIN 0, MAC 1, LINUX 2, IOS 3)
#define HOST_OS 0

// レイヤー定義
//#define QWE 0
//#define AST 1
//#define NAG 2
//#define MOU 3
//#define MOV 4
//#define MO2 5
//#define LOW 6
//#define RAI 7
//#define MAR 8
//#define SET 9
//#define SCR 10

#define QWE 0
#define NAG 1
#define MOU 2
#define MOV 3
#define MO2 4
#define LOW 5
#define RAI 6
#define MAR 7
#define SET 8
#define SCR 9

// keycodeを置き換えるとkeymap editorが利用できないため、基本的に実施しない。
//#define XXX &none
//#define ___ &none

// Misc aliases. [TODO: clean up]
//#define LG_S       &kp LG(S)             // スクリーンショット
//#define LA_F4      &kp LA(F4)            // アプリケーション終了
//#define LG_TAB     &kp LG(TAB)           // タスクビュー
//#define LCS_ESC    &kp LS(LC(ESC))       // タスクマネージャー
//#define LG_T       &kp LG(T)             // タスクバー選択
//#define LCS_TAB    &kp LS(LC(TAB))       // タブ移動(左)
//#define LC_TAB     &kp LC(TAB)           // タブ移動(右)
//#define LC_W       &kp LC(W)             // タブ削除
//#define LC_PLU     &kp LC(KP_PLUS)       // ズーム+
//#define LC_MIN     &kp LC(KP_MINUS)      // ズーム-
//#define LS_TAB     &kp LS(TAB)           // 入力移動（左）
//#define LS_HOME    &kp LS(HOME)          // カーソルから末尾まで選択
//#define LC_HOME    &kp LC(HOME)          // 先頭を表示
//#define LC_END     &kp LC(END)           // 最後尾を表示
//#define LS_END     &kp LS(END)           // カーソルから行頭まで選択
//#define LC_BS      &kp LC(BSPC)          // 単語削除
//#define LC_Z       &kp LC(Z)             // undo
//#define LC_V       &kp LC(V)             // paste
//#define LC_X       &kp LC(X)             // cut
//#define LC_C       &kp LC(C)             // copy
//#define LC_Y       &kp LC(Y)             // redo
//#define LC_T       &kp LC(T)             // 半角英数字
//#define LC_I       &kp LC(I)             // 全角カタカナ
//#define LC_O       &kp LC(O)             // 半角カタカナ

// layerの設定
&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <150>;
    quick-tap-ms = <150>;
};

/ {

    combos {
        compatible = "zmk,combos";

        // 薙刀式
        combo_ng_on {
            timeout-ms = <300>;
            key-positions = <17 18>;
            bindings = <&ng_on>;
            layers = <0>;
        };
        combo_ng_off {
            timeout-ms = <300>;
            key-positions = <13 14>;
            bindings = <&ng_off>;
            layers = <0 2>;
        };

        // Astarte
        combo_astarte_on {
            timeout-ms = <300>;
            key-positions = <29 30>;
            bindings = <&to 1>;
            layers = <0>;
        };
        combo_astarte_off {
            timeout-ms = <300>;
            key-positions = <25 26>;
            bindings = <&to 0>;
            layers = <0 1>;
        };

    };

    macros {

        // アクティブアプリ(切り替え)
        LA_TAB: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>,
                       <&macro_tap &kp TAB>,
                       <&macro_release &kp LALT>;
        };

        // アクティブアプリ(一覧)
        LCA_TAB: alt_ctrl_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>,
                       <&macro_press &kp LCTRL>,
                       <&macro_wait_time 100>,
                       <&macro_tap &kp TAB>,
                       <&macro_release &kp LCTRL>,
                       <&macro_release &kp LALT>;
        };

        // 仮想デスクトップ 新規
        LCG_D: gui_ctrl_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_press &kp LCTRL>,
                       <&macro_tap &kp D>,
                       <&macro_release &kp LCTRL>,
                       <&macro_release &kp LGUI>;
        };

        // 仮想デスクトップ 削除
        LCG_F4: gui_ctrl_F4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_press &kp LCTRL>,
                       <&macro_tap &kp F4>,
                       <&macro_release &kp LCTRL>,
                       <&macro_release &kp LGUI>;
        };

        // 仮想デスクトップ 右移動
        LCG_R: gui_ctrl_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_press &kp LCTRL>,
                       <&macro_tap &kp RIGHT>,
                       <&macro_release &kp LCTRL>,
                       <&macro_release &kp LGUI>;
        };

        // 仮想デスクトップ 左移動
        LCG_L: gui_ctrl_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_press &kp LCTRL>,
                       <&macro_tap &kp LEFT>,
                       <&macro_release &kp LCTRL>,
                       <&macro_release &kp LGUI>;
        };

        // 括弧() JIS
        JPRN2: jis_lprn_rprn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(N8)>,
                       <&macro_tap &kp LS(N9)>,
                       <&macro_tap &kp LEFT>;
        };

        // 括弧[] JIS
        JBRC2: jis_lbrc_rbrc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp RBKT>,
                       <&macro_tap &kp NUHS>,
                       <&macro_tap &kp LEFT>;
        };

        // 括弧{} JIS
        JCBR2: jis_lcbr_rcbr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(RBKT)>,
                       <&macro_tap &kp LS(NUHS)>,
                       <&macro_tap &kp LEFT>;
        };

        // naginata
        ng_on: ng_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LANGUAGE_1 &kp INTERNATIONAL_4 &to 1>
                ;
        };
        ng_off: ng_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LANGUAGE_2 &kp INTERNATIONAL_5 &to 0>
                ;
        };
        nscrl: ng_shift_scroll {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = 
                       <&macro_param_1to1>,
                       <&macro_press &mo MACRO_PLACEHOLDER>,
                       <&macro_press &ng SPACE>,
                       <&macro_pause_for_release>,
                       <&macro_release &ng SPACE>,
                       <&macro_param_1to1>,
                       <&macro_release &mo MACRO_PLACEHOLDER>;
        };

    };

    behaviors {

        // HRMの設定
        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // mod-tap(mouse)の設定
        mlt: mouse_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&mkp>;
        };

        //薙刀式のスクロール
        mns: mo_ng_shift_scroll {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&nscrl>, <&ng>;
        };

        // layerの設定(文字を入力する場合)
        klt: key_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        // JIS用文字入力([/?]はJISでも入力が同じ)
        jeqpl: jis_equal_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        jmiun: jis_minus_under {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp LS(INT1)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        jbspi: jis_bslh_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp INT1>, <&kp LS(INT3)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hjseco: homerow_mods_jis_semi_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&hrm RGUI SEMI>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        jseco: jis_semi_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        jsqdq: jis_sqt_dqt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp AMPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        jlblb: jis_lbkt_lbrc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp LS(RBKT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        jrbrb: jis_rbkt_rbrc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NUHS>, <&kp LS(NUHS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        jgrti: jis_grave_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        /*
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)                     RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)     RC(3,6) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)     RC(3,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)     RC(3,8) RC(3,9)                         RC(3,10)
        >;

        number
            00  01  02  03  04                  05  06  07  08  09
            10  11  12  13  14  15          16  17  18  19  20  21
            22  23  24  25  26  27          28  29  30  31  32  33
            34  35  36  37  38  39          40  41              42
        */

        DEFAULT {
            bindings = <
&kp Q        &kp W        &kp E         &kp R         &kp T                                                  &kp Y        &kp U         &kp I         &kp O        &kp P
&hrm LGUI A  &hrm LALT S  &hrm LSHFT D  &hrm LCTRL F  &kp G             &kp LCTRL             &kp RALT       &kp H        &hrm RCTRL J  &hrm RSHFT K  &hrm RALT L  &hjseco
&klt MOU Z   &kp X        &kp C         &kp V         &kp B             &kp LSHFT             &kp RGUI       &kp N        &kp M         &kp COMMA     &kp DOT      &klt MOU SLASH
&kp LALT     &kp LCTRL    &kp LSHFT     &mkp MB1      &lt MOV SPACE     &mlt MAR MB2          &lt LOW BSPC   &lt RAI RET                                           &mo MOU
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };
/*
        ASTARTE {
            bindings = <
&kp Q        &kp P        &kp U         &kp Y         &kp COMMA                                            &kp J        &kp D         &kp H         &kp G        &kp W
&hrm LGUI I  &hrm LALT O  &hrm LSHFT E  &hrm LCTRL A  &kp DOT         &kp LCTRL             &kp RALT       &kp K        &hrm RCTRL T  &hrm RSHFT N  &hrm RALT S  &hrm RGUI R
&klt MOU Z   &kp X        &kp SLASH     &kp C         &jseco          &kp LSHFT             &kp RGUI       &kp M        &kp L         &kp F         &kp B        &klt MOU V
&kp LALT     &kp LCTRL    &kp LSHFT     &mkp MB1      &lt MOV SPACE   &mlt MAR MB2          &lt LOW BSPC   &lt RAI RET                                           &mo MOU
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };
*/
        NAGINATA {
            bindings = <
&ng Q      &ng W      &ng E      &ng R         &ng T                                        &ng Y      &ng U      &ng I      &ng O      &ng P
&ng A      &ng S      &ng D      &ng F         &ng G           &kp LCTRL      &kp RALT      &ng H      &ng J      &ng K      &ng L      &ng SEMI
&ng Z      &ng X      &ng C      &ng V         &ng B           &kp LSHFT      &kp RGUI      &ng N      &ng M      &ng COMMA  &ng DOT    &ng SLASH
&none      &none      &none      &mlt MO2 MB1  &mns SCR SPACE  &mlt RAI MB2   &lt LOW BSPC  &ng ENTER                                   &mo MOU
            >;
        };

        MOUSE {
            bindings = <
&LA_TAB        &none         &none      &none       &kp LS(LC(ESC))                                    &kp LC(V)      &kp LC(X)      &kp LC(C)      &kp LS(LC(TAB))    &kp LC(TAB)
&kp LG(T)      &kp LEFT      &kp DOWN   &kp UP      &kp RIGHT         &kp LCTRL         &kp RALT       &mkp MB3       &mkp MB1       &mo SCR        &mkp MB2           &kp LC(W)
&none          &LCG_D        &LCG_L     &LCG_R      &kp LG(TAB)       &kp LSHFT         &kp RGUI       &kp LS(HOME)   &kp LC(HOME)   &kp LC(END)    &kp LS(END)        &none
&none          &none         &none      &mkp MB4    &mkp MB3          &mkp MB5          &mlt MAR MB4   &mlt MO2 MB5                                                    &none
            >;
        };

        MOVE {
            bindings = <
&kp ESC         &kp INS    &kp INT5           &kp INT4          &kp CAPS                                   &none           &kp BSPC     &kp DEL    &kp LC(BSPC)   &kp TAB
&hrm LGUI TAB   &kp LALT   &hrm LSHFT LANG2   &hrm LCTRL LANG1  &caps_word    &kp LCTRL      &kp RALT      &kp LEFT        &kp DOWN     &kp UP     &kp RIGHT      &kp RET
&kp PSCRN       &none      &kp LC(T)          &kp LC(I)	        &kp LC(O)     &kp LSHFT      &kp RGUI      &kp HOME        &kp PG_UP    &kp PG_DN  &kp END        &kp K_APP
&none           &none      &none              &none             &none         &none          &lt SET DEL   &lt MAR SPACE                                          &none
            >;
        };

        MOVE2 {
            bindings = <
&kp ESC         &kp INS    &kp LANG5          &kp LANG4         &kp CAPS                                   &none           &kp BSPC     &kp DEL    &kp LC(BSPC)   &kp TAB
&hrm LGUI TAB   &kp LALT   &hrm LSHFT LANG2   &hrm LCTRL LANG1  &caps_word    &kp LCTRL      &kp RALT      &kp LEFT        &kp DOWN     &kp UP     &kp RIGHT      &kp RET
&kp PSCRN       &none      &kp LC(T)          &kp LC(I)	        &kp LC(O)     &kp LSHFT      &kp RGUI      &kp HOME        &kp PG_UP    &kp PG_DN  &kp END        &kp K_APP
&none           &none      &none              &none             &none         &none          &lt SET DEL   &lt MAR SPACE                                          &none
            >;
        };

        LOWER {
            bindings = <
&kp LS(N1) &kp LBKT   &kp LS(N3)    &kp LS(N4)    &kp LS(N5)                               &kp EQUAL   &kp LS(N6)  &kp LS(SQT)  &kp LS(N8)    &kp LS(N9)
&jgrti     &jeqpl     &jmiun        &jbspi        &none        &kp LCTRL         &kp RALT  &none       &kp LS(N8)  &jlblb       &kp LS(RBKT)  &kp AMPS
&kp PLUS   &kp COLON  &kp LS(INT1)  &kp LS(INT3)  &none        &kp LSHFT         &kp RGUI  &none       &kp LS(N9)  &jrbrb       &kp LS(NUHS)  &jsqdq
&none      &none      &none         &kp DEL       &kp RET      &kp BSPC          &none     &none                                              &none
            >;
        };

        RAISE {
            bindings = <
&kp F1           &kp F2           &kp F3            &kp F4            &kp F5                                       &kp F6     &kp F7            &kp F8            &kp F9           &kp F10
&hrm LGUI N1     &hrm LALT N2     &hrm LSHFT N3     &hrm LCTRL N4     &kp N5       &kp LCTRL             &kp RALT  &kp N6     &hrm RCTRL N7     &hrm RSHFT N8     &hrm RALT N9     &hrm RGUI N0
&kp KP_PLUS      &kp KP_MINUS     &kp KP_MULTIPLY   &kp KP_DIVIDE     &none        &kp LSHFT             &kp RGUI  &none      &kp KP_DOT        &kp KP_EQUAL      &kp F11          &kp F12
&none            &none            &none             &kp DEL           &lt MAR RET  &lt SET BSPC          &none     &none                                                           &none
            >;
        };

        MACRO {
            bindings = <
&kp LA(F4)       &kp LG(S)    &mkp MB4      &mkp MB5    &kp BSPC                           &kp LS(LC(ESC))  &msc LC(SCRL_UP)  &msc LC(SCRL_DOWN)  &LCA_TAB    &LA_TAB
&kp LC(Z)        &kp LC(X)    &kp LC(C)     &kp LC(V)   &kp LC(Y)   &kp LCTRL    &kp RALT  &kp LG(T)        &JPRN2            &JBRC2              &JCBR2      &none
&kp LS(LC(TAB))  &kp LC(TAB)  &kp LS(TAB)   &kp TAB     &kp RET     &kp LSHFT    &kp RGUI  &kp LG(TAB)      &LCG_L            &LCG_R              &LCG_D      &LCG_F4
&none            &none        &none         &none       &none       &none        &none     &none                                                              &none
            >;
        };

        SETUP {
            bindings = <
&kp C_MUTE    &kp C_PP    &none         &none  &kp SLCK                          &kp CAPS    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
&kp C_VOL_UP  &kp C_NEXT  &kp C_BRI_UP  &none  &none          &none      &none   &kp KP_NUM  &none         &none         &none         &bt BT_SEL 4
&kp C_VOL_DN  &kp C_PREV  &kp C_BRI_DN  &none  &bootloader    &none      &none   &none       &none         &none         &bt BT_CLR    &bt BT_CLR_ALL
&none         &none       &none         &none  &none          &none      &none   &none                                                 &none
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

    };
};
